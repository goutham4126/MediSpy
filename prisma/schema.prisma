// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())
  clerkUserId     String @unique
  name            String?
  email           String @unique
  imageUrl        String?
  role            Role @default(PATIENT)
  doctorAge       String?
  doctorPhone     String?
  doctorGender    String?
  doctorAddress   String?
  doctorEducation String?
  doctorExperience String?
  doctorSpecialization String?
  doctorLicenseNo String?
  doctorHospital  String?
  doctorAvailability Boolean @default(false)
  symptoms       Symptom[] @relation("patientSymptoms")
  subscription   Subscription[] @relation("subscriptions")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  patientConsultations Consultation[] @relation("patientConsultations")
  doctorConsultations Consultation[] @relation("doctorConsultations")
}

model Consultation {
  id             String   @id @default(uuid())
  doctorId       String
  doctor         User @relation(fields: [doctorId], references: [id], onDelete: Cascade, name: "doctorConsultations")
  patientId      String
  patient        User @relation(fields: [patientId], references: [id], onDelete: Cascade, name: "patientConsultations")
  diagnosis      String?
  gender         String
  age            Int
  patientPhoneNo String
  prescription   String?
  videoUrl       String?
  date           DateTime
  stage          String
  status         Status
}

model Symptom {
  id             String   @id @default(uuid())
  patientId      String
  patient        User @relation(fields: [patientId], references: [id], onDelete: Cascade, name: "patientSymptoms")
  description    String
  possibleDisease String
  riskFactor     String
  deleted        Boolean @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Subscription {
  id             String   @id @default(uuid())
  userId         String @unique
  user           User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "subscriptions")
  plan           Plan @default(FREE)
  endDate        DateTime @default(dbgenerated("(NOW() + INTERVAL '30 days')"))
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

enum Role {
  ADMIN
  PATIENT
  DOCTOR
}

enum Status {
  COMPLETED
  ACTIVE
  PENDING
  CANCELLED
}

enum Plan {
  FREE
  BASIC
  PREMIUM
}